#include<stdio.h>
#include<stdlib.h>
#include<sys/stat.h>
#include<errno.h>

typedef struct {
char *name;
long long size;
} fileInfo;

int compare_size(const void *a, const void *b) {

const fileInfo *a = const(fileInfo *)a;
const fileInfo 8b = const(fileInfo *)b;

if(file_a->size < file_b->size) {
  return -1;
}
if(file_a->size > file_b->size) {
    return 1;
}
   return 0;

int main(int argc,char *argv[]) {

if(argc < 2) {
printf(stderr,"usage=%s\n <file1>,<file2>, ...\n"argv[0]);
return EXIT_FAILURE;
}

int file_count = argc - 1;

//allocation of memory 
fileInfo *all_files = malloc(file_count * sizeof(fileInfo);
if(all_files == NULL) {
perror("memory allocation failed");
return EXIT_FAILURE;
}

for (int i=0; i<file_count; ++i) {
struct stat file_stat;
char current_file_name = [argv + 1];

all_file[i].name = current_file_name;

if(stat(current_file_name, &file_stat == 0){
    all_files[i].size = file_stat.st.size;
} else {
fprintf(stderr,"error finding %s file : %s\n",current_file_name, strerror(errno);
all_file[i].size = -1;
  }
}
qsort(all_files, file_count, sizeof(fileInfo), compare_sizes);

}

printf("Files sorted by size: \n");
for(int i=0; i < file_count; i++) {

if(all_files[i].size >= 0) {
  printf("-%s (size: %lld bytes)\n",all_files[i].name,all_files[i].size);
}
}
free(all_files);
return EXIT_SUCCESS;
}


   
