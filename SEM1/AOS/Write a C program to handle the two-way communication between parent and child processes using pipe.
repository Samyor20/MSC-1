#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

void main() {
int pipe1[2],pipe2[2];
pid_t pid;

char parent_msg("hello this is parent");
char child_msg("hello this is child");
buffer(100);


//creating pipes
if(pipe(pipe1) == -1 || pipe(pipe2) == -1) {
perror("Pipe creation failed!")
exit(1);
}

pid = fork();

if( pid < 0) {
printf("fork failed");
exit(1);
}

if(pid == 0) {
close(pipe[1]); //close write end of pipe 1
read(pipe[0],buffer,sizeof(buffer));
printf("child recieved: %s\n", buffer);
close(pipe1[0]);

close(pipe[2]); //close read end of pipe 2
write(pipe2[1], parent_msg, strlen(child_msg) +1);
close(pipe2[1]);
} else {
close(pipe[1]) //close the read end of pipe 1
write(pipe1[1], child_msg, strlen(parent_msg) = 1);
close(pipe1[1]);

close (pipe[2]); //close the read end of pipe 2
read(pipe[0],buffer,sizeof(buffer));
printf("parent recieved: %s\n", buffer);
close(pipe2[0]);

}
return 0;
}
