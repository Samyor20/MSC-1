def print_solution(board):
    for row in board:
        print("".join(["Q" if cell else "." for cell in row]))
        print()
def is_safe(board,row,col):
    return not any(board[i][col] or board[i][j] or board[i][k])
    for i,(j,k) in enumerate(zip(range(col,-1,-1),range(col,len(board)))) \
        and not any(board[i][j] or board[i][k] for i,(j,k) in enumerate(zip(range(col,-1,-1),range(row,-1,-1))))
def solve_n_queens(board,row):
    if row == len(board):
        print_solution(board)
        return
    for col in range(len(board)):
        if not any(board[i][col] for i in range(row)) and is_safe(board,row,col)
        board[row][col] = True
        solve_n_queens(board,row +1)
        board[row][col] = False
def n_queens(size):
    board = [[False] * size for _in range(size)]
    solve_n_queens(board,0)
if __name__ == "__main__":
    try:
        size = int(input("Enter the size of chess board(N): "))
        n_queen(size)
    except ValueError:
        print("Invalid input. Please enter the number.")
